# /etc/zshrc ou ~/.zshrc
# Fichier de configuration principal de zsh
# Formation Debian GNU/Linux par Alexis de Lattre
# http://www.via.ecp.fr/~alexis/formation-linux/


is_cygwin() {
    local uname
    # Check we're running under cygwin
    uname=`uname -s`
    [[ $uname[0,6] == 'CYGWIN' ]]
}

#
# 1. Les alias
#
alias e="emacs -nw"
alias t="date +%Y%m%d"

# Association de fichiers
alias -s pdf='evince'
alias -s jpg='display'
alias -s png='display'
alias -s gif='display'

# Alias personnels
if [ -f ~/.alias ]; then
    .  $HOME/.alias
fi


#
# 2. Prompt et DÃ©finition des touches
#

# exemple : ma touche HOME, cf man termcap, est codifiee K1 (upper left
# key on keyboard) dans le /etc/termcap. En me referant a l'entree
# correspondant a mon terminal (par exemple 'linux') dans ce fichier, je
# lis : K1=\E[1~, c'est la sequence de caracteres qui sera envoyee au
# shell. La commande bindkey dit simplement au shell : a chaque fois que
# tu rencontres telle sequence de caractere, tu dois faire telle action.
# La liste des actions est disponible dans "man zshzle".

# Correspondance touches-fonction
bindkey -e
bindkey '^A'    beginning-of-line       # Home
bindkey '^E'    end-of-line             # End
bindkey '^D'    delete-char             # Del
bindkey '[3~' delete-char             # Del
bindkey '[2~' overwrite-mode          # Insert
bindkey '[5~' history-search-backward # PgUp
bindkey '[6~' history-search-forward  # PgDn

# Prompt couleur (la couleur n'est pas la mÃªme pour le root et
# pour les simples utilisateurs)
autoload -U colors
colors

# The eight base colors are: black, red, green, yellow, blue, magenta, cyan,
# and white. Each of these has codes for foreground and background.
# In addition there are eight intensity attributes:
#           bold, faint, standout, underline, blink, reverse, and conceal.
# Finally, there are six codes used to negate attributes:
#           none (reset all attributes to the defaults),
#           normal (neither bold nor faint),
#           no-standout,
#           no-underline,
#           no-blink,
#           no-reverse.

NONE="%{$reset_color%}"
NOIR="%{$fg_bold[black]%}"
ROUGE="%{$fg_bold[red]%}"
VERT="%{$fg_bold[green]%}"
BLEU="%{$fg_bold[blue]%}"
JAUNE="%{$fg_bold[yellow]%}"
CYAN="%{$fg_bold[cyan]%}"
VIOLET="%{$fg_bold[magenta]%}"
BLANC="%{$fg_bold[white]%}"

# Couleur du host
COLOR_HOST=$VERT

# Gestionaire de version
setopt PROMPT_SUBST

autoload -Uz vcs_info
zstyle ':vcs_info:*' formats ' %f(%s) %F{cyan}%r%F{5}[%F{2}%b:%S%F{5}]%f'
zstyle ':vcs_info:*' disable bzr cdv darcs mtn svk tla
zstyle ':vcs_info:*' enable git cvs svn
#zstyle ':vcs_info:(svn|bzr):*' branchformat '%b%{'${fg[yellow]}'%i%}:%r'
# Versionning du home => pas d'info
zstyle ':vcs_info:*:cyrille' formats "$VERT%~$JAUNE"
zstyle  ':vcs_info:*' nvcsformats "$VERT%~$JAUNE"
precmd () { vcs_info }


if [ "`id -u`" -eq 0 ]; then
  export PS1='$VIOLET%T $BLEU%n$JAUNE@$COLOR_HOST%m$NONE${vcs_info_msg_0_}$JAUNE%#$NONE '
else
  export PS1='$VIOLET%T $ROUGE%n$JAUNE@$COLOR_HOST%m$NONE${vcs_info_msg_0_}$JAUNE%#$NONE '
fi

# Console linux, dans un screen ou un rxvt
if [ "$TERM" = "linux" -o "$TERM" = "screen" -o "$TERM" = "rxvt" ]
then
  # Correspondance touches-fonction spÃ©cifique
  bindkey '[1~' beginning-of-line       # Home
  bindkey '[4~' end-of-line             # End
fi

# xterm
if [ "$TERM" = "xterm" ]
then
  # Correspondance touches-fonction spÃ©cifique
  bindkey '[H'  beginning-of-line       # Home
  bindkey '[F'  end-of-line             # End
fi

# Gestion de la couleur pour 'ls' (exportation de LS_COLORS)
if [ -x /usr/bin/dircolors ]
then
  if [ -r ~/.dir_colors ]
  then
    eval "`dircolors ~/.dir_colors`"
  elif [ -r /etc/dir_colors ]
  then
    eval "`dircolors /etc/dir_colors`"
  fi
fi

#
# 3. Options de zsh (cf 'man zshoptions')
#

# Je ne veux JAMAIS de beeps
unsetopt beep
unsetopt hist_beep
unsetopt list_beep

# Ctrl+D est Ã©quivalent Ã  'logout'
unsetopt ignore_eof
# Affiche le code de sortie si diffÃ©rent de '0'
setopt print_exit_value
# Demande confirmation pour 'rm *'
unsetopt rm_star_silent

# Correction orthographique des commandes
# DÃ©sactivÃ© car, contrairement Ã Â  ce que dit le "man", il essaye de
# corriger les commandes avant de les hasher
#setopt correct

# SchÃ©mas de complÃ©tion

# - SchÃ©ma A :
# 1Ã¨re tabulation : complÃ¨te jusqu'au bout de la partie commune
# 2Ã¨me tabulation : propose une liste de choix
# 3Ã¨me tabulation : complÃ¨te avec le 1er item de la liste
# 4Ã¨me tabulation : complÃ¨te avec le 2Ã¨me item de la liste, etc...
# -> c'est le schÃ©ma de complÃ©tion par dÃ©faut de zsh.

# SchÃ©ma B :
# 1Ã¨re tabulation : propose une liste de choix et complÃ¨te avec le 1er item
#                   de la liste
# 2Ã¨me tabulation : complÃ¨te avec le 2Ã¨me item de la liste, etc...
# Si vous voulez ce schÃ©ma, dÃ©commentez la ligne suivante :
# setopt menu_complete

# SchÃ©ma C :
# 1Ã¨re tabulation : complÃ¨te jusqu'au bout de la partie commune et
#                   propose une liste de choix
# 2Ã¨me tabulation : complÃ¨te avec le 1er item de la liste
# 3Ã¨me tabulation : complÃ¨te avec le 2Ã¨me item de la liste, etc...
# Ce schÃ©ma est le meilleur Ã Â  mon goÃ»t !
# Si vous voulez ce schÃ©ma, dÃ©commentez la ligne suivante :
unsetopt list_ambiguous
# (Merci Ã Â  Youri van Rietschoten de m'avoir donnÃ© l'info !)

# Options de complÃ©tion
# Quand le dernier caractÃ¨re d'une complÃ©tion est '/' et que l'on
# tape 'espace' aprÃ¨s, le '/' est effaÃ§Ã©
setopt auto_remove_slash
# Fait la complÃ©tion sur les fichiers et rÃ©pertoires cachÃ©s
setopt glob_dots

# Traite les liens symboliques comme il faut
setopt chase_links

# Quand l'utilisateur commence sa commande par '!' pour faire de la
# complÃ©tion historique, il n'exÃ©cute pas la commande immÃ©diatement
# mais il Ã©crit la commande dans le prompt
setopt hist_verify
# Si la commande est invalide mais correspond au nom d'un sous-rÃ©pertoire
# exÃ©cuter 'cd sous-rÃ©pertoire'
setopt auto_cd
# L'exÃ©cution de "cd" met le rÃ©pertoire d'oÃ¹ l'on vient sur la pile
setopt auto_pushd
# Ignore les doublons dans la pile
setopt pushd_ignore_dups
# N'affiche pas la pile aprÃ¨s un "pushd" ou "popd"
setopt pushd_silent
# "pushd" sans argument = "pushd $HOME"
setopt pushd_to_home

# Les jobs qui tournent en tÃ¢che de fond sont nicÃ© Ã Â  '0'
unsetopt bg_nice
# N'envoie pas de "HUP" aux jobs qui tourent quand le shell se ferme
unsetopt hup

#
# 4. ParamÃªtres de l'historique des commandes
#
# Nombre d'entrÃ©es dans l'historique
export HISTSIZE=500
export SAVEHIST=500

# Fichier oÃ¹ est stockÃ© l'historique
export HISTFILE=~/.history
setopt append_history
setopt inc_append_history
setopt extended_history
setopt hist_find_no_dups
setopt hist_ignore_all_dups
setopt hist_reduce_blanks
setopt hist_ignore_space
setopt hist_no_store
setopt hist_no_functions
setopt no_hist_beep
setopt hist_save_no_dups


#
# 5. ComplÃ©tion des options des commandes
#
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}'
zstyle ':completion:*' max-errors 3 numeric
zstyle ':completion:*' use-compctl false
# Completion colorÃ©e
zstyle ':completion:*' list-colors `dircolors`


# Enable compsys completion.
autoload -U compinit
compinit
autoload zsh-mime-setup


export ZSH=~/tools-dev/zsh/oh-my-zsh/
export ZSH_CUSTOM=~/tools-dev/zsh/custom
# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="cyrilix"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(common-aliases git git-prompt colorize mvn python ant colored-man docker docker-compose gradle history jsontools jump mvn pip postgres rsync redis-cli tmux sudo github systemd zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

start_server_x(){
    export DISPLAY=:0
    # Start xserver if necessary
    xset -q > /dev/null
    XSERVER_STATUS=$?
    if [ 0 != $XSERVER_STATUS ] ; then
        nohup XWin -multiwindow -clipboard 2>&1 > /dev/null &
    fi
}

start_ssh_agent(){
    # If no SSH agent is already running, start one now. Re-use sockets so we never
    # have to start more than one session.

    export SSH_AUTH_SOCK=$HOME/.ssh-socket

    ssh-add -l >/dev/null 2>&1
    if [ $? = 2 ]; then
        # No ssh-agent running
        rm -rf $SSH_AUTH_SOCK
        # >| allows output redirection to over-write files if no clobber is set
        ssh-agent -a $SSH_AUTH_SOCK >| /tmp/.ssh-script
        source /tmp/.ssh-script
        echo $SSH_AGENT_PID >| ~/.ssh-agent-pid
        rm /tmp/.ssh-script
    fi
}

[ -f ~/.ssh/config ] && : ${(A)ssh_config_hosts:=${${${${(@M)${(f)"$(<~/.ssh/config)"}:#Host *}#Host }:#*\**}:#*\?*}}
[ -f ~/.ssh/known_hosts ] && : ${(A)ssh_known_hosts:=${${${(f)"$(<$HOME/.ssh/known_hosts)"}%%\ *}%%,*}}
zstyle ':completion:*:*:*' hosts $ssh_config_hosts $ssh_known_hosts

# Load custom zshrc
if [ -f $HOME/.zshrc_custom ]; then
    source $HOME/.zshrc_custom
fi

export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor line)

