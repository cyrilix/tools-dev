#compdef mvn

local curcontext="$curcontext" state line cmds ret=1 

_arguments -C \
    '(- 1 *)'{-h,--help}'[display help information]' \
    '(-am --also-make)'{-am,--also-make}'[if project list is specified, also build projects required by the list]' \
    '(-amd --also-make-dependents)'{-amd,--also-make-dependents}'[if project list is specified, also build projects that depend on projects on the list]' \
    '(-B --batch-mode)'{-B,--batch-mode}'[run in non-interactive (batch) mode]' \
    '(-C --strict-checksums)'{-C,--strict-checksums}"[fail the build if checksums don't match]" \
    '(-c --lax-checksums)'{-c,--lax-checksums}"[warn if checksums don't match]" \
    '(-cpu --check-plugin-updates)'{-cpu,--check-plugin-updates}"[force upToDate check for any relevant registered plugins]" \
    '(-D --define)'{-D,--define}"[define a system property]:property" \
    '(-e --errors)'{-e,--errors}"[produce execution error messages]" \
    '(-emp --encrypt-master-password)'{-emp,--encrypt-master-password}"[encrypt master security password]" \
    '(-ep --encrypt-password)'{-ep,--encrypt-password}"[encrypt server password]" \
    '(-f --file)'{-f,--file}"[force the use of an alternate POM file]:file" \
    '(-fae --fail-at-end)'{-fae,--fail-at-end}"[only fail the build afterwards; allow all non-impacted builds to continue]" \
    '(-ff --fail-fast)'{-ff,--fail-fast}"[stop at first failure in reactorized builds]" \
    '(-fn --fail-never)'{-fn,--fail-never}"[NEVER fail the build, regardless of project result]" \
    '(-gs --global-settings)'{-gs,--global-settings}"[alternate path for the global settings file]:file" \
    '(-N --non-recursive)'{-N,--non-recursive}"[do not recurse into sub-projects]" \
    '(-npr --no-plugin-registry)'{-npr,--no-plugin-registry}"[don't use ~/.m2/plugin-registry.xml for plugin versions]" \
    '(-npu --no-plugin-updates)'{-npu,--no-plugin-updates}"[suppress upToDate check for anye relevant registered plugins]" \
    '(-o --offline)'{-o,--offline}"[work offline]" \
    '(-P --activate-profiles)'{-P,--activate-profiles}"[comma-delimited list of profiles to activate]:profile]" \
    '(-pl --projects)'{-pl,--projects}"[build specified reactor projects instead of all projects]" \
    '(-q --quiet)'{-q,--quiet}"[Quiet output - only show errors]" \
    '(-r --reactor)'{-r,--reactor}"[dynamically build reactor from subdirectories]" \
    '(-rf --resume-from)'{-rf,--resume-from}"[resume reactor from specified project]:project" \
    '(-s --settings)'{-s,--settings}"[alternate path for the user settings file]:file" \
    '(-U --update-snapshots)'{-U,--update-snapshots}"[forces a check for updated releases and snapshots on remote repositories]" \
    '(-up --update-plugins)'{-up,--update-plugins}"[synonym for cpu]" \
    '(-V --show-version)'{-V,--show-version}"[display version information WITHOUT stopping build]" \
    '(-v --version)'{-v,--version}"[display version information]" \
    '(-X --debug)'{-X,--debug}"[produce execution debug output]" \
    '*: :->cmds' \
    '-*: :->args' && ret=0

case $state in
  cmds)
	cmds=(
	    validate:"validate the project is correct and all necessary information is available to complete a build" 
	    clean:"delete build directory"
	    generate-sources:"generate any source code for inclusion in compilation"
	    compile:"compile the source code of the project"
	    test:"run tests using a suitable unit testing framework" 
	    package:"take the compiled code and package it in its distributable format, such as a JAR, WAR, or EAR"
	    integration-test:"process and deploy the package if necessary into an environment where integration tests can be run"
	    verify:"run any checks to verify the package is valid and meets quality criteria"
	    install:"install the package into the local repository, for use as a dependency in other projects locally"
	    deploy:"copies the final package to the remote repository for sharing with other developers and projects (usually only relevant during a formal release" 
	    site:"generate project documentation and reports about the project" 
	    site-deploy:"copy the generate project documentation to the remote repository")
   _describe -t commands 'mvn command' cmds && ret=0
  ;;
  args)
      case $line[1] in
      
      install)
     #   _deb_packages uninstalled && ret=0
      ;;
      *)
        (( ret )) && _message 'no more arguments'
      ;;
    esac
    ;;	
esac

return ret
_mvn "$0"

